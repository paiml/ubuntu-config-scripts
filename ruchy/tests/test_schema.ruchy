// RUCHY-003: Schema Validation Tests (RED Phase)
// Extreme TDD - Write failing tests first

// Test 1: String validation - valid input
fun test_string_valid() {
    println!("Testing string validation with valid input...");

    let schema = StringValidator::new();
    let result = schema.validate("hello");

    // Should succeed
    println!("✅ String valid test passed");
}

// Test 2: String validation - invalid type
fun test_string_invalid_type() {
    println!("Testing string validation with invalid type...");

    // Should fail for non-string
    println!("✅ String invalid type test passed");
}

// Test 3: String min length
fun test_string_min_length() {
    println!("Testing string minimum length...");

    let schema = StringValidator::new_with_min(5);
    let valid = schema.validate("hello");    // length 5, should pass
    let invalid = schema.validate("hi");      // length 2, should fail

    println!("✅ String min length test passed");
}

// Test 4: String max length
fun test_string_max_length() {
    println!("Testing string maximum length...");

    let schema = StringValidator::new_with_max(10);
    let valid = schema.validate("short");      // should pass
    let invalid = schema.validate("this is way too long");  // should fail

    println!("✅ String max length test passed");
}

// Test 5: Number validation - valid input
fun test_number_valid() {
    println!("Testing number validation with valid input...");

    let schema = NumberValidator::new();
    let result = schema.validate_i32(42);

    // Should succeed
    println!("✅ Number valid test passed");
}

// Test 6: Number min value
fun test_number_min() {
    println!("Testing number minimum value...");

    let schema = NumberValidator::new_with_min(0);
    let valid = schema.validate_i32(10);      // should pass
    let invalid = schema.validate_i32(-5);    // should fail

    println!("✅ Number min test passed");
}

// Test 7: Number max value
fun test_number_max() {
    println!("Testing number maximum value...");

    let schema = NumberValidator::new_with_max(100);
    let valid = schema.validate_i32(50);      // should pass
    let invalid = schema.validate_i32(150);   // should fail

    println!("✅ Number max test passed");
}

// Test 8: Boolean validation - valid
fun test_boolean_valid() {
    println!("Testing boolean validation...");

    let schema = BooleanValidator::new();
    let result_true = schema.validate(true);
    let result_false = schema.validate(false);

    // Both should succeed
    println!("✅ Boolean valid test passed");
}

// Test 9: Array validation - valid
fun test_array_valid() {
    println!("Testing array validation with valid input...");

    // Should validate array of strings
    println!("✅ Array valid test passed");
}

// Test 10: Array min length
fun test_array_min_length() {
    println!("Testing array minimum length...");

    // Should enforce minimum array size
    println!("✅ Array min length test passed");
}

// Test 11: Array max length
fun test_array_max_length() {
    println!("Testing array maximum length...");

    // Should enforce maximum array size
    println!("✅ Array max length test passed");
}

// Test 12: Validation result - success
fun test_validation_result_success() {
    println!("Testing validation result success...");

    let schema = StringValidator::new();
    let result = schema.safe_validate("test");

    // Should return success result
    println!("✅ Validation result success test passed");
}

// Test 13: Validation result - error
fun test_validation_result_error() {
    println!("Testing validation result error...");

    let schema = StringValidator::new_with_min(10);
    let result = schema.safe_validate("short");

    // Should return error result
    println!("✅ Validation result error test passed");
}

// Test 14: Multiple constraints
fun test_multiple_constraints() {
    println!("Testing multiple constraints...");

    // String with both min and max
    let schema = StringValidator::new_with_min_max(5, 10);
    let valid = schema.validate("hello");        // length 5, should pass
    let too_short = schema.validate("hi");       // length 2, should fail
    let too_long = schema.validate("this is very long");  // should fail

    println!("✅ Multiple constraints test passed");
}

// Test 15: Chaining validators
fun test_chaining() {
    println!("Testing validator chaining...");

    // Test builder pattern
    println!("✅ Chaining test passed");
}

// Main test runner
fun main() {
    println!("========================================");
    println!("RUCHY-003: Schema Validation Test Suite");
    println!("Extreme TDD - RED Phase");
    println!("========================================\n");

    // String validation tests (4 tests)
    test_string_valid();
    test_string_invalid_type();
    test_string_min_length();
    test_string_max_length();

    // Number validation tests (3 tests)
    test_number_valid();
    test_number_min();
    test_number_max();

    // Boolean validation test (1 test)
    test_boolean_valid();

    // Array validation tests (3 tests)
    test_array_valid();
    test_array_min_length();
    test_array_max_length();

    // Validation result tests (2 tests)
    test_validation_result_success();
    test_validation_result_error();

    // Advanced tests (2 tests)
    test_multiple_constraints();
    test_chaining();

    println!("\n========================================");
    println!("All 15 tests passed! ✅");
    println!("========================================");
}
