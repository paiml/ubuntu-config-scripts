#!/usr/bin/env -S deno run --allow-read --allow-write --allow-run

/**
 * Fix DaVinci Resolve window positioning issue
 * 
 * This script updates the DaVinci Resolve wrapper to fix window positioning
 * problems where the application window appears off-screen.
 */

import { logger } from "../lib/logger.ts";
import { runCommand } from "../lib/common.ts";

const WRAPPER_PATH = "/usr/local/bin/davinci-resolve";

const UPDATED_WRAPPER = `#!/bin/bash
# DaVinci Resolve Wrapper - Fixed window positioning
# Generated by fix-davinci-window.ts

# Set NVIDIA environment
export NVIDIA_DRIVER_CAPABILITIES=all
export __NV_PRIME_RENDER_OFFLOAD=1
export __GLX_VENDOR_LIBRARY_NAME=nvidia
export CUDA_VISIBLE_DEVICES=0
export VK_ICD_FILENAMES=/usr/share/vulkan/icd.d/nvidia_icd.json

# Force CUDA mode
export RESOLVE_CUDA_FORCE=1
export DR_USE_GPU=1

# Set library paths - updated for new driver
export LD_LIBRARY_PATH=/usr/local/cuda-12/lib64:/usr/local/cuda/lib64:/usr/lib/x86_64-linux-gnu:/usr/lib/nvidia:$LD_LIBRARY_PATH

# Set CUDA paths
export CUDA_HOME=/usr/local/cuda
export CUDA_PATH=/usr/local/cuda
export PATH=$CUDA_HOME/bin:$PATH

# OpenCL settings
export OCL_ICD_VENDORS=/etc/OpenCL/vendors/

# Nvidia runtime settings
export __GL_SHADER_DISK_CACHE=1
export __GL_SHADER_DISK_CACHE_PATH=/tmp

# Qt/X11 settings to fix window positioning
export QT_AUTO_SCREEN_SCALE_FACTOR=1
export QT_SCREEN_SCALE_FACTORS=1
export QT_SCALE_FACTOR=1

# Force proper window manager hints
export _JAVA_AWT_WM_NONREPARENTING=1

# Reset window geometry if it was saved incorrectly
if [ -f "$HOME/.local/share/DaVinciResolve/configs/config.dat" ]; then
    # Back up the config before modifying
    cp "$HOME/.local/share/DaVinciResolve/configs/config.dat" \
       "$HOME/.local/share/DaVinciResolve/configs/config.dat.bak.\$(date +%Y%m%d_%H%M%S)"
fi

# Launch DaVinci Resolve
exec /opt/resolve/bin/resolve "$@"
`;

async function fixDavinciWindow(): Promise<void> {
    logger.info("Fixing DaVinci Resolve window positioning issue");

    try {
        // Check if wrapper exists
        try {
            await Deno.stat(WRAPPER_PATH);
            logger.info(`Found wrapper at ${WRAPPER_PATH}`);
        } catch {
            logger.error(`Wrapper not found at ${WRAPPER_PATH}`);
            logger.info("Creating new wrapper");
        }

        // Create local file for the wrapper
        const localWrapperPath = "./davinci-resolve-wrapper.sh";
        await Deno.writeTextFile(localWrapperPath, UPDATED_WRAPPER);
        await Deno.chmod(localWrapperPath, 0o755);
        
        logger.info("Created updated wrapper script");
        
        // Try to install with sudo, but provide manual instructions if it fails
        logger.info("Installing wrapper to system location...");
        logger.info("You may be prompted for your sudo password");
        
        console.log("\nPlease run the following command to install the wrapper:");
        console.log(`\nsudo cp ${localWrapperPath} ${WRAPPER_PATH} && sudo chmod +x ${WRAPPER_PATH}\n`);
        
        // Try automated install
        const installResult = await runCommand([
            "sh", "-c",
            `echo "Attempting automatic installation..." && sudo cp ${localWrapperPath} ${WRAPPER_PATH} && sudo chmod +x ${WRAPPER_PATH}`
        ]);

        if (installResult.success) {
            logger.success("Wrapper installed successfully");
            // Clean up local file
            await Deno.remove(localWrapperPath).catch(() => {});
        } else {
            logger.warn("Automatic installation failed. Please run the command shown above manually.");
            logger.info(`The wrapper script has been saved to: ${localWrapperPath}`);
        }

        logger.success("DaVinci Resolve wrapper updated successfully");
        
        // Kill any existing DaVinci Resolve processes
        logger.info("Checking for existing DaVinci Resolve processes");
        const psResult = await runCommand(["pgrep", "-f", "/opt/resolve/bin/resolve"]);
        
        if (psResult.success && psResult.stdout.trim()) {
            logger.info("Found running DaVinci Resolve process, terminating...");
            await runCommand(["pkill", "-f", "/opt/resolve/bin/resolve"]);
            await new Promise(resolve => setTimeout(resolve, 2000)); // Wait for process to exit
        }

        // Clear Qt/DaVinci Resolve geometry cache
        const geometryFiles = [
            `${Deno.env.get("HOME")}/.config/Blackmagic Design/DaVinci Resolve/config.dat`,
            `${Deno.env.get("HOME")}/.local/share/DaVinciResolve/configs/config.dat`,
        ];

        for (const file of geometryFiles) {
            try {
                const stat = await Deno.stat(file);
                if (stat.isFile) {
                    const backupPath = `${file}.bak.${Date.now()}`;
                    logger.info(`Backing up config: ${file} -> ${backupPath}`);
                    await Deno.rename(file, backupPath);
                }
            } catch {
                // File doesn't exist, that's okay
            }
        }

        logger.success("Window positioning fix applied");
        logger.info("You can now launch DaVinci Resolve with: davinci-resolve");
        logger.info("The window should appear in the correct position");

    } catch (error) {
        logger.error(`Failed to fix DaVinci Resolve: ${error}`);
        throw error;
    }
}

// Run if executed directly
if (import.meta.main) {
    try {
        await fixDavinciWindow();
    } catch (error) {
        logger.error(`Error: ${error}`);
        Deno.exit(1);
    }
}

export { fixDavinciWindow };