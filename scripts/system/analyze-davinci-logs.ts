#!/usr/bin/env -S deno run --allow-all

/**
 * Analyze DaVinci Resolve logs and create targeted fixes
 */

import { logger } from "../lib/logger.ts";
import { runCommand } from "../lib/common.ts";

async function analyzeDavinciLogs(): Promise<void> {
  logger.info("Analyzing DaVinci Resolve startup issues...");

  // 1. Check if process is actually running
  const psResult = await runCommand([
    "pgrep",
    "-f",
    "/opt/resolve/bin/resolve",
  ]);
  if (psResult.success && psResult.stdout.trim()) {
    const pid = psResult.stdout.trim();
    logger.warn(
      `DaVinci Resolve is running (PID: ${pid}) but window not visible`,
    );

    // Get process details
    const detailResult = await runCommand([
      "ps",
      "-p",
      pid,
      "-o",
      "pid,ppid,state,cmd",
      "--no-headers",
    ]);
    if (detailResult.success) {
      logger.info(`Process details: ${detailResult.stdout.trim()}`);
    }

    // Check process state
    const statResult = await runCommand(["cat", `/proc/${pid}/stat`]);
    if (statResult.success) {
      const parts = statResult.stdout.split(" ");
      const state = parts[2];
      logger.info(
        `Process state: ${state} (D=disk sleep, S=sleeping, R=running, Z=zombie)`,
      );

      if (state === "D") {
        logger.error("Process in uninterruptible sleep (waiting for I/O)");
        logger.info("This often indicates GPU driver issues");
      }
    }

    // Check what files it has open
    const lsofResult = await runCommand(["lsof", "-p", pid]);
    if (lsofResult.success) {
      const lines = lsofResult.stdout.split("\n");
      const gpuFiles = lines.filter((l) =>
        l.includes("nvidia") || l.includes("cuda")
      );
      if (gpuFiles.length > 0) {
        logger.info(`GPU files in use: ${gpuFiles.length}`);
      }
    }
  } else {
    logger.info("DaVinci Resolve process not running");
  }

  // 2. Check for crashes in system logs
  const dmesgResult = await runCommand(["sudo", "dmesg", "-T"]);
  if (dmesgResult.success) {
    const lines = dmesgResult.stdout.split("\n");
    const recentLines = lines.slice(-100);
    const resolveErrors = recentLines.filter((l) =>
      l.toLowerCase().includes("resolve") ||
      l.includes("NVRM") ||
      l.includes("nvidia") ||
      l.includes("gpu")
    );

    if (resolveErrors.length > 0) {
      logger.error("Found GPU/driver errors in dmesg:");
      resolveErrors.slice(-5).forEach((err) => console.log(err));
    }
  }

  // 3. Analyze strace if available
  try {
    const straceContent = await Deno.readTextFile("/tmp/davinci-strace.log");
    const lines = straceContent.split("\n").slice(-100);

    // Look for common issues
    const patterns = [
      { pattern: /ENOENT.*cuda/i, issue: "CUDA library not found" },
      { pattern: /ENOENT.*nvidia/i, issue: "NVIDIA library not found" },
      { pattern: /EACCES/i, issue: "Permission denied" },
      { pattern: /SIGSEGV/i, issue: "Segmentation fault" },
      { pattern: /futex.*ETIMEDOUT/i, issue: "Thread deadlock/timeout" },
    ];

    for (const { pattern, issue } of patterns) {
      const matches = lines.filter((l) => pattern.test(l));
      if (matches.length > 0) {
        logger.error(`Found issue: ${issue} (${matches.length} occurrences)`);
      }
    }
  } catch {
    // No strace log
  }

  // 4. Check GPU state
  const nvidiaResult = await runCommand(["nvidia-smi", "-q"]);
  if (nvidiaResult.success) {
    const output = nvidiaResult.stdout;

    // Check for persistence mode
    if (output.includes("Persistence Mode") && output.includes("Disabled")) {
      logger.warn("GPU Persistence Mode is disabled (can cause delays)");
      logger.info("Fix: sudo nvidia-smi -pm 1");
    }

    // Check for compute mode
    if (output.includes("Compute Mode") && output.includes("Prohibited")) {
      logger.error("GPU Compute Mode is Prohibited!");
      logger.info("Fix: sudo nvidia-smi -c DEFAULT");
    }

    // Check memory
    const memMatch = output.match(
      /FB Memory Usage[\s\S]*?Total\s+:\s+(\d+)\s+MiB[\s\S]*?Used\s+:\s+(\d+)\s+MiB/,
    );
    if (memMatch) {
      const [, total, used] = memMatch;
      const usedPercent = (parseInt(used!) / parseInt(total!)) * 100;
      if (usedPercent > 90) {
        logger.error(
          `GPU memory nearly full: ${used}/${total} MiB (${
            usedPercent.toFixed(1)
          }%)`,
        );
      }
    }
  }

  // 5. Generate comprehensive fix script
  logger.info("Creating comprehensive fix script...");

  const fixScript = `#!/bin/bash
# DaVinci Resolve Comprehensive Fix
# Generated by analyze-davinci-logs.ts

echo "=== DaVinci Resolve Comprehensive Fix ==="

# 1. Kill all related processes
echo "Cleaning up processes..."
pkill -9 -f resolve
pkill -9 -f VstScanner
pkill -9 -f FusionCompServer
sleep 2

# 2. Fix GPU settings
echo "Configuring GPU..."
sudo nvidia-smi -pm 1 2>/dev/null  # Enable persistence mode
sudo nvidia-smi -c DEFAULT 2>/dev/null  # Set compute mode to default

# 3. Clear ALL caches and configs
echo "Clearing all caches..."
rm -rf ~/.local/share/DaVinciResolve
rm -rf ~/.config/Blackmagic\\ Design
rm -rf ~/.cache/BlackmagicDesign
rm -rf ~/.nv/ComputeCache
rm -rf /tmp/davinci-*
rm -rf /tmp/.blackmagic-*

# 4. Reset library cache
echo "Rebuilding library cache..."
sudo ldconfig

# 5. Create clean directories
mkdir -p ~/.local/share/DaVinciResolve/logs
mkdir -p ~/.local/share/DaVinciResolve/configs
mkdir -p ~/.config/Blackmagic\\ Design/DaVinci\\ Resolve

# 6. Set proper permissions
chmod 755 ~/.local/share/DaVinciResolve
chmod 755 ~/.config/Blackmagic\\ Design

# 7. Create minimal wrapper
cat > /tmp/davinci-minimal.sh << 'EOF'
#!/bin/bash
# Minimal DaVinci Resolve launcher

# Basic environment only
export HOME="\${HOME}"
export USER="\${USER}"
export DISPLAY="\${DISPLAY:-:0}"

# Minimal GPU setup
export __NV_PRIME_RENDER_OFFLOAD=1
export __GLX_VENDOR_LIBRARY_NAME=nvidia

# Disable all optional features
export RESOLVE_CUDA_FORCE=0
export RESOLVE_SKIP_VST_SCAN=1
export QT_LOGGING_RULES="*=false"

# Launch with clean environment
exec env -i \\
    HOME="\$HOME" \\
    USER="\$USER" \\
    DISPLAY="\$DISPLAY" \\
    PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin" \\
    LD_LIBRARY_PATH="/usr/lib/x86_64-linux-gnu:/usr/lib/nvidia" \\
    __NV_PRIME_RENDER_OFFLOAD=1 \\
    __GLX_VENDOR_LIBRARY_NAME=nvidia \\
    /opt/resolve/bin/resolve "\$@"
EOF

chmod +x /tmp/davinci-minimal.sh

echo ""
echo "=== Fix Applied ==="
echo ""
echo "Now try launching with minimal environment:"
echo "  /tmp/davinci-minimal.sh"
echo ""
echo "If that works, gradually add features back."
echo ""
echo "Alternative launches to try:"
echo "  1. Without GPU: RESOLVE_CUDA_FORCE=0 /opt/resolve/bin/resolve"
echo "  2. With debug: QT_DEBUG_PLUGINS=1 /opt/resolve/bin/resolve"
echo "  3. Safe mode: /opt/resolve/bin/resolve --safe"
echo "  4. Reset prefs: /opt/resolve/bin/resolve --resetConfig"
echo ""
`;

  await Deno.writeTextFile("./davinci-fix-comprehensive.sh", fixScript);
  await Deno.chmod("./davinci-fix-comprehensive.sh", 0o755);

  logger.success("Created comprehensive fix: ./davinci-fix-comprehensive.sh");

  // 6. Check for common library issues
  logger.info("Checking library dependencies...");
  const lddResult = await runCommand(["ldd", "/opt/resolve/bin/resolve"]);
  if (lddResult.success) {
    const missingLibs = lddResult.stdout.split("\n").filter((l) =>
      l.includes("not found")
    );
    if (missingLibs.length > 0) {
      logger.error(`Missing libraries: ${missingLibs.length}`);
      missingLibs.forEach((lib) => console.log(`  ${lib.trim()}`));

      logger.info("To fix missing libraries:");
      logger.info("  sudo apt update");
      logger.info("  sudo apt install --fix-broken");
      logger.info(
        "  sudo apt install libglu1-mesa libxcb-xinerama0 libxcb-xinput0",
      );
    }
  }

  // 7. Final recommendations
  logger.info("\n=== Diagnosis Complete ===");
  logger.info("Run the comprehensive fix:");
  logger.info("  bash ./davinci-fix-comprehensive.sh");
  logger.info("");
  logger.info("If still not working, try:");
  logger.info("  1. Reboot system");
  logger.info("  2. Reinstall NVIDIA drivers: sudo ubuntu-drivers autoinstall");
  logger.info("  3. Reinstall DaVinci Resolve");
}

if (import.meta.main) {
  try {
    await analyzeDavinciLogs();
  } catch (error) {
    logger.error(`Analysis failed: ${error}`);
    Deno.exit(1);
  }
}
