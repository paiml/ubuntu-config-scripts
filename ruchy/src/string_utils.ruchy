// RUC-014: String Utilities Library
//
// Pure string operations under 120 LOC (Issue #92 constraint)
// Workaround for Issue #94: Using split("") instead of slicing

// Capitalize first letter of a string
fun capitalize(s: String) -> String {
    if s.len() == 0 {
        return s;
    }

    let chars = s.split("");
    if chars.len() < 3 {
        return s;
    }

    // chars[0] is empty, chars[1] is first character, chars[last] is empty
    let first = chars[1].to_uppercase();
    let mut result = first;

    let mut i = 2;
    while i < chars.len() - 1 {
        result = result + &chars[i];
        i = i + 1;
    }

    result
}

// Convert to title case (capitalize each word)
fun to_title_case(s: String) -> String {
    let words = s.split(" ");
    let mut result = String::new();
    let mut first = true;

    let mut i = 0;
    while i < words.len() {
        let word = words[i];
        if word.len() > 0 {
            if !first {
                result = result + " ";
            }
            result = result + &capitalize(word);
            first = false;
        }
        i = i + 1;
    }

    result
}

// Check if string contains only digits
fun is_numeric(s: String) -> bool {
    if s.len() == 0 {
        return false;
    }

    let chars = s.split("");

    let mut i = 1;
    while i < chars.len() - 1 {
        let ch = chars[i];
        if ch != "0" && ch != "1" && ch != "2" && ch != "3" && ch != "4" &&
           ch != "5" && ch != "6" && ch != "7" && ch != "8" && ch != "9" {
            return false;
        }
        i = i + 1;
    }

    true
}

// Check if string is empty or only whitespace
fun is_empty_or_whitespace(s: String) -> bool {
    s.trim().len() == 0
}

// Truncate string to maximum length
fun truncate(s: String, max_len: i32) -> String {
    if max_len <= 0 {
        return String::new();
    }

    let chars = s.split("");
    let mut result = String::new();
    let mut count = 0;

    let mut i = 1;
    while i < chars.len() - 1 && count < max_len {
        result = result + &chars[i];
        count = count + 1;
        i = i + 1;
    }

    result
}

// Count words in string (split by whitespace)
fun word_count(s: String) -> i32 {
    let trimmed = s.trim();
    if trimmed.len() == 0 {
        return 0;
    }

    let words = trimmed.split(" ");
    let mut count = 0;

    let mut i = 0;
    while i < words.len() {
        if words[i].len() > 0 {
            count = count + 1;
        }
        i = i + 1;
    }

    count
}
