// RUC-004: Ubuntu Microphone CLI Tool - GREEN Phase
//
// Command-line interface for microphone configuration
// Uses microphone_module library via module imports (v3.150.0)

use microphone_module;

// ============================================================================
// CLI Command Handlers
// ============================================================================

fun cmd_list() -> Result<(), String> {
    let devices = match microphone_module::detect_microphone_devices() {
        Ok(d) => d,
        Err(_) => return Err("Failed to detect microphones".to_string()),
    };

    println!("Available Microphones:");
    println!("");

    if devices.len() == 0 {
        println!("  No microphones found");
        return Ok(());
    }

    let mut i = 0;
    while i < devices.len() {
        let d = &devices[i];
        let marker = if d.is_default { "* " } else { "  " };
        println!("{}[{}] {}", marker, d.id, d.name);
        println!("  Description: {}", d.description);
        if d.is_default {
            println!("  (Current default)");
        }
        println!("");
        i = i + 1;
    }

    Ok(())
}

fun cmd_current() -> Result<(), String> {
    println!("Querying current microphone configuration...");
    println!("");

    let config = match microphone_module::get_current_mic_config() {
        Ok(c) => c,
        Err(_) => return Err("Failed to get current config".to_string()),
    };

    println!("Current Microphone Configuration:");
    println!("");
    println!("  Device: {}", config.device_id);
    println!("  Volume: {}%", config.volume);
    let mute_status = if config.is_muted { "yes" } else { "no" };
    println!("  Muted: {}", mute_status);

    Ok(())
}

fun cmd_set(device_id: String) -> Result<(), String> {
    println!("Configuring microphone: {}", device_id);
    println!("");

    match microphone_module::configure_microphone(device_id) {
        Ok(_) => {
            println!("✓ Successfully configured microphone");
            let config = match microphone_module::get_current_mic_config() {
                Ok(c) => c,
                Err(_) => return Ok(()),
            };
            println!("  Device: {}", config.device_id);
            Ok(())
        }
        Err(_) => Err("Failed to configure microphone".to_string()),
    }
}

fun cmd_volume(device_id: String, volume: i32) -> Result<(), String> {
    println!("Setting volume to {}%...", volume);
    println!("");

    match microphone_module::set_mic_volume(device_id.to_string(), volume) {
        Ok(_) => {
            println!("✓ Volume set successfully");
            println!("  Device: {}", device_id);
            println!("  Volume: {}%", volume);
            Ok(())
        }
        Err(_) => Err("Failed to set volume".to_string()),
    }
}

fun cmd_mute(device_id: String) -> Result<(), String> {
    println!("Muting microphone...");
    println!("");

    match microphone_module::set_mic_mute(device_id.to_string(), true) {
        Ok(_) => {
            println!("✓ Microphone muted");
            println!("  Device: {}", device_id);
            Ok(())
        }
        Err(_) => Err("Failed to mute microphone".to_string()),
    }
}

fun cmd_unmute(device_id: String) -> Result<(), String> {
    println!("Unmuting microphone...");
    println!("");

    match microphone_module::set_mic_mute(device_id.to_string(), false) {
        Ok(_) => {
            println!("✓ Microphone unmuted");
            println!("  Device: {}", device_id);
            Ok(())
        }
        Err(_) => Err("Failed to unmute microphone".to_string()),
    }
}

fun cmd_validate(device_id: String) {
    println!("Validating device ID: '{}'", device_id);
    println!("");

    if microphone_module::validate_mic_device_id(device_id.to_string()) {
        println!("✓ Valid device ID format");
    } else {
        println!("✗ Invalid device ID format");
        println!("");
        println!("Device IDs must:");
        println!("  - Not be empty");
        println!("  - Not contain null bytes");
        println!("  - Not contain path traversal (../)");
        println!("  - Not contain spaces");
    }
}

fun cmd_help() {
    println!("Ubuntu Microphone Configuration Tool");
    println!("");
    println!("USAGE:");
    println!("  ubuntu-mic <command> [arguments]");
    println!("");
    println!("COMMANDS:");
    println!("  list                    List all microphones");
    println!("  current                 Show current microphone configuration");
    println!("  set <device>            Set default microphone (by ID or name)");
    println!("  volume <device> <0-100> Set microphone volume");
    println!("  mute <device>           Mute microphone");
    println!("  unmute <device>         Unmute microphone");
    println!("  validate <id>           Validate device ID format");
    println!("  help, --help            Show this help message");
    println!("");
    println!("EXAMPLES:");
    println!("  ubuntu-mic list");
    println!("  ubuntu-mic current");
    println!("  ubuntu-mic set alsa_input.usb-Focusrite_Scarlett_4i4_USB-00");
    println!("  ubuntu-mic volume alsa_input.usb-Focusrite_Scarlett_4i4_USB-00 75");
    println!("  ubuntu-mic mute alsa_input.usb-Focusrite_Scarlett_4i4_USB-00");
    println!("  ubuntu-mic validate test-device");
}

// ============================================================================
// Main - Demo Mode
// ============================================================================

fun main() {
    println!("=== Ubuntu Microphone CLI - Demo Mode ===");
    println!("");

    println!("=== COMMAND: list ===");
    let _ = cmd_list();
    println!("");

    println!("=== COMMAND: current ===");
    let _ = cmd_current();
    println!("");

    println!("=== COMMAND: validate test-device ===");
    cmd_validate("test-device".to_string());
    println!("");

    println!("=== COMMAND: validate ../bad ===");
    cmd_validate("../bad".to_string());
    println!("");

    println!("=== COMMAND: help ===");
    cmd_help();
    println!("");

    println!("=== Demo Complete ===");
    println!("All commands implemented and tested!");
}
