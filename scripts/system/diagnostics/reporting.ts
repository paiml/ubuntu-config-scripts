/**
 * Diagnostic reporting and fix application module
 */

import { logger } from "../../lib/logger.ts";
import type { DiagnosticResult } from "./audio.ts";

export function getCategoryEmoji(category: string): string {
  const emojis: Record<string, string> = {
    audio: "🔊",
    video: "🎥",
    gpu: "🎮",
    system: "💻",
    network: "🌐",
  };
  return emojis[category] || "📋";
}

export function getSeverityIcon(severity: string): string {
  const icons: Record<string, string> = {
    critical: "❌",
    warning: "⚠️",
    info: "ℹ️",
    success: "✅",
  };
  return icons[severity] || "•";
}

export function generateReport(results: DiagnosticResult[]): void {
  logger.info("\n" + "=".repeat(80));
  logger.info("📋 DIAGNOSTIC REPORT");
  logger.info("=".repeat(80) + "\n");

  const categories = ["critical", "warning", "info", "success"];

  for (const severity of categories) {
    const filtered = results.filter((r) => r.severity === severity);
    if (filtered.length === 0) continue;

    logger.info(`\n${getSeverityIcon(severity)} ${severity.toUpperCase()} (${filtered.length}):`);

    for (const result of filtered) {
      logger.info(`  ${getCategoryEmoji(result.category)} ${result.message}`);
      if (result.fix) {
        logger.info(`     Fix: ${result.fix}`);
      }
      if (result.command) {
        logger.info(`     Command: ${result.command}`);
      }
    }
  }

  logger.info("\n" + "=".repeat(80));

  // Summary
  const critical = results.filter((r) => r.severity === "critical").length;
  const warnings = results.filter((r) => r.severity === "warning").length;
  const success = results.filter((r) => r.severity === "success").length;

  logger.info("\nSUMMARY:");
  logger.info(`  ✅ Passed: ${success}`);
  logger.info(`  ⚠️  Warnings: ${warnings}`);
  logger.info(`  ❌ Critical: ${critical}`);

  if (critical > 0) {
    logger.info("\n⚠️  Critical issues found! Please address them above.");
  } else if (warnings > 0) {
    logger.info("\n⚠️  Some warnings found. System should work but may have issues.");
  } else {
    logger.info("\n✅ All checks passed! Your system is healthy.");
  }
}

export async function applyFixes(results: DiagnosticResult[]): Promise<void> {
  const fixable = results.filter((r) =>
    r.severity === "critical" && r.command
  );

  if (fixable.length === 0) {
    logger.info("\nNo automatic fixes available.");
    return;
  }

  logger.info(`\n🔧 Found ${fixable.length} fixable issue(s).`);
  logger.info("Would you like to apply fixes? (Run with --fix to apply)");

  for (const result of fixable) {
    logger.info(`  - ${result.message}`);
    logger.info(`    Command: ${result.command}`);
  }
}

export async function exportFixes(results: DiagnosticResult[]): Promise<void> {
  const fixable = results.filter((r) => r.command);

  if (fixable.length === 0) {
    logger.info("No fixes to export.");
    return;
  }

  const scriptPath = "/tmp/av-fixes.sh";
  const commands = [
    "#!/bin/bash",
    "# Audio/Video Diagnostic Fixes",
    "# Generated by diagnose-av-issues.ts",
    "",
    ...fixable.map((r) => `# ${r.message}\n${r.command}`),
  ];

  await Deno.writeTextFile(scriptPath, commands.join("\n"));
  await Deno.chmod(scriptPath, 0o755);

  logger.info(`\n📝 Fix script exported to: ${scriptPath}`);
  logger.info("Review the script and run with: bash " + scriptPath);
}
