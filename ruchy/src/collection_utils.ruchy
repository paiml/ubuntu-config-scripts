// RUC-017: Collection Utilities Library
//
// Pure collection operations under 120 LOC (Issue #92 constraint)
// No I/O, commands, or external dependencies

// Check if vector contains value
fun contains(vec: Vec<i32>, value: i32) -> bool {
    let mut i = 0;
    while i < vec.len() {
        if vec[i] == value {
            return true;
        }
        i = i + 1;
    }
    false
}

// Find index of value (-1 if not found)
fun find_index(vec: Vec<i32>, value: i32) -> i32 {
    let mut i = 0;
    let len = vec.len();
    while i < len {
        if vec[i] == value {
            let result = i as i32;
            return result;
        }
        i = i + 1;
    }
    let not_found = -1;
    not_found
}

// Reverse vector
fun reverse(vec: Vec<i32>) -> Vec<i32> {
    let mut result = Vec::new();
    let mut i = vec.len();
    while i > 0 {
        i = i - 1;
        result.push(vec[i]);
    }
    result
}

// Remove duplicate values
fun deduplicate(vec: Vec<i32>) -> Vec<i32> {
    let mut result = Vec::new();
    let mut i = 0;
    while i < vec.len() {
        if !contains(result, vec[i]) {
            result.push(vec[i]);
        }
        i = i + 1;
    }
    result
}

// Take first n elements
fun take(vec: Vec<i32>, n: i32) -> Vec<i32> {
    let mut result = Vec::new();
    if n <= 0 {
        return result;
    }

    let mut i = 0;
    while i < vec.len() && (i as i32) < n {
        result.push(vec[i]);
        i = i + 1;
    }
    result
}

// Drop first n elements
fun drop(vec: Vec<i32>, n: i32) -> Vec<i32> {
    let mut result = Vec::new();
    if n <= 0 {
        let mut i = 0;
        while i < vec.len() {
            result.push(vec[i]);
            i = i + 1;
        }
        return result;
    }

    let mut i = 0;
    while i < vec.len() {
        if (i as i32) >= n {
            result.push(vec[i]);
        }
        i = i + 1;
    }
    result
}

// Find maximum value in vector
fun max_in_vec(vec: Vec<i32>) -> i32 {
    if vec.len() == 0 {
        return 0;
    }

    let mut max_val = vec[0];
    let mut i = 1;
    while i < vec.len() {
        if vec[i] > max_val {
            max_val = vec[i];
        }
        i = i + 1;
    }
    max_val
}

// Find minimum value in vector
fun min_in_vec(vec: Vec<i32>) -> i32 {
    if vec.len() == 0 {
        return 0;
    }

    let mut min_val = vec[0];
    let mut i = 1;
    while i < vec.len() {
        if vec[i] < min_val {
            min_val = vec[i];
        }
        i = i + 1;
    }
    min_val
}

// Count occurrences of value
fun count_occurrences(vec: Vec<i32>, value: i32) -> i32 {
    let mut count = 0;
    let mut i = 0;
    while i < vec.len() {
        if vec[i] == value {
            count = count + 1;
        }
        i = i + 1;
    }
    count
}

// Check if all values are positive
fun all_positive(vec: Vec<i32>) -> bool {
    let mut i = 0;
    while i < vec.len() {
        if vec[i] <= 0 {
            return false;
        }
        i = i + 1;
    }
    true
}
