#!/usr/bin/env -S deno run --allow-all

import { logger } from "../lib/logger.ts";
import { confirm, requireRoot, runCommand } from "../lib/common.ts";

async function checkNvidiaDriver(): Promise<void> {
  logger.info("Checking NVIDIA driver...");

  const smiResult = await runCommand(["nvidia-smi"]);
  if (!smiResult.success) {
    throw new Error("nvidia-smi failed - driver may not be properly installed");
  }

  const driverResult = await runCommand([
    "nvidia-smi",
    "--query-gpu=name,driver_version,compute_cap",
    "--format=csv,noheader",
  ]);

  if (driverResult.success) {
    logger.info(`GPU: ${driverResult.stdout.trim()}`);
  }
}

async function fixLibraryPaths(): Promise<void> {
  logger.info("Fixing CUDA library paths...");

  // Create nvidia library config for ldconfig
  const ldConfigContent = `/usr/local/cuda/lib64
/usr/lib/x86_64-linux-gnu
/usr/lib/nvidia
/usr/local/lib`;

  await Deno.writeTextFile(
    "/etc/ld.so.conf.d/nvidia-cuda.conf",
    ldConfigContent,
  );

  // Update library cache
  const ldconfigResult = await runCommand(["ldconfig"]);
  if (!ldconfigResult.success) {
    logger.error("Failed to update library cache");
  }
}

async function installMissingPackages(): Promise<void> {
  logger.info("Checking for missing packages...");

  const packages = [
    "nvidia-cuda-toolkit",
    "nvidia-cuda-dev",
    "ocl-icd-libopencl1",
    "opencl-headers",
    "clinfo",
    "nvidia-opencl-icd-550", // Adjust version to match driver
  ];

  for (const pkg of packages) {
    const checkResult = await runCommand(["dpkg", "-l", pkg]);
    if (!checkResult.success || !checkResult.stdout.includes("ii")) {
      logger.info(`Installing ${pkg}...`);
      const installResult = await runCommand(["apt-get", "install", "-y", pkg]);
      if (!installResult.success) {
        logger.warn(`Failed to install ${pkg}: ${installResult.stderr}`);
      }
    } else {
      logger.info(`✓ ${pkg} already installed`);
    }
  }
}

async function createDavinciWrapper(): Promise<void> {
  logger.info("Creating DaVinci Resolve wrapper script...");

  const wrapperContent = `#!/bin/bash
# DaVinci Resolve 20.1 Wrapper - Working with CUDA
# Generated by fix-davinci-cuda.ts

# Kill stuck processes
pkill -f VstScanner 2>/dev/null

# Basic environment
export HOME="\${HOME}"
export USER="\${USER}"
export DISPLAY="\${DISPLAY:-:0}"

# NVIDIA GPU settings
export __NV_PRIME_RENDER_OFFLOAD=1
export __GLX_VENDOR_LIBRARY_NAME=nvidia

# Disable optional features
export RESOLVE_CUDA_FORCE=0
export RESOLVE_SKIP_VST_SCAN=1
export QT_LOGGING_RULES="*=false"

# Find CUDA libraries - check multiple versions
CUDA_LIB_PATH=""
for cuda_dir in /usr/local/cuda-12/lib64 /usr/local/cuda-11/lib64 /usr/local/cuda/lib64; do
    if [ -d "\${cuda_dir}" ]; then
        CUDA_LIB_PATH="\${cuda_dir}:\${CUDA_LIB_PATH}"
    fi
done

# Also check system locations
CUDA_LIB_PATH="\${CUDA_LIB_PATH}:/usr/lib/x86_64-linux-gnu"

# Set library path with CUDA
export LD_LIBRARY_PATH="\${CUDA_LIB_PATH}:/usr/lib/nvidia:/opt/resolve/libs"

# Launch with clean environment
exec env -i \\
    HOME="\$HOME" \\
    USER="\$USER" \\
    DISPLAY="\$DISPLAY" \\
    PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin" \\
    LD_LIBRARY_PATH="\${LD_LIBRARY_PATH}" \\
    __NV_PRIME_RENDER_OFFLOAD=1 \\
    __GLX_VENDOR_LIBRARY_NAME=nvidia \\
    RESOLVE_CUDA_FORCE=0 \\
    /opt/resolve/bin/resolve "\$@"
`;

  const wrapperPath = "/usr/local/bin/davinci-resolve";
  await Deno.writeTextFile(wrapperPath, wrapperContent);
  await runCommand(["chmod", "+x", wrapperPath]);

  logger.success(`Wrapper created at ${wrapperPath}`);
  logger.info("You can now launch DaVinci with: davinci-resolve");
}

async function verifySetup(): Promise<void> {
  logger.info("Verifying CUDA setup...");

  // Check CUDA compiler
  const nvccResult = await runCommand(["nvcc", "--version"]);
  if (nvccResult.success) {
    const versionMatch = nvccResult.stdout.match(/release ([\d.]+)/);
    if (versionMatch) {
      logger.success(`✓ CUDA Compiler version: ${versionMatch[1]}`);
    }
  } else {
    logger.warn("CUDA compiler (nvcc) not found");
  }

  // Check OpenCL
  const clResult = await runCommand(["clinfo"]);
  if (clResult.success && clResult.stdout.includes("NVIDIA")) {
    logger.success("✓ OpenCL detected NVIDIA GPU");
  } else {
    logger.warn("OpenCL may not be properly configured");
  }

  // Check library paths
  const libResult = await runCommand(["ldconfig", "-p"]);
  if (libResult.success) {
    const hasLibcuda = libResult.stdout.includes("libcuda.so");
    const hasLibcudart = libResult.stdout.includes("libcudart.so");

    if (hasLibcuda && hasLibcudart) {
      logger.success("✓ CUDA libraries found in system");
    } else {
      logger.warn("Some CUDA libraries may be missing");
    }
  }
}

async function main(): Promise<void> {
  logger.info("DaVinci Resolve CUDA Fix Script");
  logger.info("=================================");

  // Don't require root for the wrapper creation
  // requireRoot();

  try {
    await checkNvidiaDriver();

    const proceed = await confirm(
      "This will install CUDA packages and create a wrapper script. Continue?",
      true,
    );

    if (!proceed) {
      logger.info("Cancelled by user");
      return;
    }

    await installMissingPackages();
    await fixLibraryPaths();
    await createDavinciWrapper();
    await verifySetup();

    logger.success("\n✓ CUDA fix applied!");
    logger.info("\nNext steps:");
    logger.info("1. Log out and log back in (or reboot)");
    logger.info("2. Launch DaVinci with: davinci-resolve");
    logger.info("\nIf issues persist, try:");
    logger.info("- Check /var/log/syslog for GPU errors");
    logger.info("- Run: nvidia-smi -pm 1 (enable persistence mode)");
    logger.info("- Ensure secure boot is disabled in BIOS");
  } catch (error) {
    logger.error(`Error: ${error}`);
    Deno.exit(1);
  }
}

if (import.meta.main) {
  await main();
}
