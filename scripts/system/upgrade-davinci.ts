#!/usr/bin/env -S deno run --allow-all

/**
 * Upgrade DaVinci Resolve to the latest version
 *
 * Automatically finds the installer in Downloads and performs the upgrade
 * while preserving settings and applying necessary fixes.
 */

import { logger } from "../lib/logger.ts";
import { runCommand } from "../lib/common.ts";

async function upgradeDavinciResolve(): Promise<void> {
  logger.info("Starting DaVinci Resolve upgrade process...");

  // 1. Find the installer in Downloads
  const downloadsDir = `${Deno.env.get("HOME")}/Downloads`;
  logger.info(`Searching for installer in ${downloadsDir}...`);

  // Use ls to find .run files
  const lsResult = await runCommand([
    "sh",
    "-c",
    `ls -1t ${downloadsDir}/*.run 2>/dev/null | head -5`,
  ]);

  if (!lsResult.success || !lsResult.stdout.trim()) {
    logger.error("No .run installer found in Downloads folder");
    logger.info("Please download DaVinci Resolve from:");
    logger.info("https://www.blackmagicdesign.com/products/davinciresolve");
    return;
  }

  const installers = lsResult.stdout.trim().split("\n");
  let installerPath: string | null = null;

  // Find DaVinci installer
  for (const installer of installers) {
    if (
      installer.toLowerCase().includes("davinci") ||
      installer.toLowerCase().includes("resolve")
    ) {
      installerPath = installer;
      break;
    }
  }

  // If no DaVinci installer found, use the first .run file
  if (!installerPath && installers.length > 0) {
    installerPath = installers[0] ?? null;
    logger.warn(`No DaVinci-specific installer found, using: ${installerPath}`);
  }

  if (!installerPath) {
    logger.error("No suitable installer found");
    return;
  }

  logger.success(`Found installer: ${installerPath}`);

  // Extract version from filename
  const filename = installerPath.split("/").pop() || "";
  const versionMatch = filename.match(/(\d+\.\d+(?:\.\d+)?(?:\.\d+)?)/);
  const version = versionMatch ? versionMatch[1] : "Unknown";
  logger.info(`Version detected: ${version}`);

  // 2. Check current installation
  const resolveExists = await runCommand([
    "test",
    "-f",
    "/opt/resolve/bin/resolve",
  ]);
  const isUpgrade = resolveExists.success;

  if (isUpgrade) {
    logger.info(
      "Existing DaVinci Resolve installation detected - performing upgrade",
    );
  } else {
    logger.info("No existing installation found - performing fresh install");
  }

  // 3. Stop running DaVinci processes
  logger.info("Stopping any running DaVinci Resolve processes...");
  await runCommand(["pkill", "-f", "resolve"]);
  await runCommand(["pkill", "-f", "VstScanner"]);
  await runCommand(["pkill", "-f", "FusionCompServer"]);
  await new Promise((resolve) => setTimeout(resolve, 2000));

  // 4. Backup current settings
  if (isUpgrade) {
    logger.info("Backing up current settings and projects...");
    const backupDir = `${Deno.env.get("HOME")}/davinci-backup-${Date.now()}`;
    await Deno.mkdir(backupDir, { recursive: true });

    const dirsToBackup = [
      ".local/share/DaVinciResolve",
      ".config/Blackmagic Design",
    ];

    for (const dir of dirsToBackup) {
      const sourcePath = `${Deno.env.get("HOME")}/${dir}`;
      const destPath = `${backupDir}/${dir}`;

      try {
        await Deno.stat(sourcePath);
        await Deno.mkdir(destPath.substring(0, destPath.lastIndexOf("/")), {
          recursive: true,
        });

        const cpResult = await runCommand(["cp", "-r", sourcePath, destPath]);
        if (cpResult.success) {
          logger.info(`Backed up: ${dir}`);
        }
      } catch {
        // Directory doesn't exist
      }
    }

    logger.success(`Backup saved to: ${backupDir}`);
  }

  // 5. Make installer executable
  logger.info("Preparing installer...");
  await runCommand(["chmod", "+x", installerPath]);

  // 6. Create installation script
  const installScript = `#!/bin/bash
# DaVinci Resolve ${version} Upgrade Script
# Auto-generated by upgrade-davinci.ts

set -e

echo "========================================"
echo "DaVinci Resolve Upgrade"
echo "Version: ${version}"
echo "========================================"
echo ""

# Check not running as root
if [ "$EUID" -eq 0 ]; then 
   echo "ERROR: Do not run as root. The installer will request sudo when needed."
   exit 1
fi

# Create temp directory for extraction
TEMP_DIR=$(mktemp -d)
echo "Working directory: $TEMP_DIR"
cd "$TEMP_DIR"

# Extract the installer
echo "Extracting installer package..."
if sh "${installerPath}" --noexec --target ./extracted 2>/dev/null; then
    echo "Extraction successful"
    cd extracted
    
    # Find the actual installer
    INSTALLER=""
    if [ -f "DaVinci_Resolve_${version}_Linux.run" ]; then
        INSTALLER="DaVinci_Resolve_${version}_Linux.run"
    elif [ -f "DaVinci_Resolve_Studio_${version}_Linux.run" ]; then
        INSTALLER="DaVinci_Resolve_Studio_${version}_Linux.run"
    elif [ -f "installer" ]; then
        INSTALLER="installer"
    else
        # Try to find any .run file
        INSTALLER=$(find . -name "*.run" -type f | head -1)
    fi
    
    if [ -n "$INSTALLER" ]; then
        echo "Found installer: $INSTALLER"
        echo "Running installation (you will be prompted for sudo password)..."
        sudo "./$INSTALLER" -i -y
    else
        echo "ERROR: Could not find installer executable"
        ls -la
        exit 1
    fi
else
    echo "Direct installation mode..."
    echo "Running installer (you will be prompted for sudo password)..."
    sudo "${installerPath}" -i -y
fi

# Clean up
cd /
rm -rf "$TEMP_DIR"

echo ""
echo "========================================"
echo "Installation Complete!"
echo "========================================"
`;

  const scriptPath = "/tmp/davinci-upgrade.sh";
  await Deno.writeTextFile(scriptPath, installScript);
  await runCommand(["chmod", "+x", scriptPath]);

  logger.success("Installation script created");

  // 7. Create the working launcher (that we know works)
  logger.info("Creating optimized launcher...");

  const launcherScript = `#!/bin/bash
# DaVinci Resolve Launcher - Proven Working Configuration
# Version: ${version}

# Kill any stuck processes from previous launches
pkill -f VstScanner 2>/dev/null

# Basic environment
export HOME="${Deno.env.get("HOME")}"
export USER="${Deno.env.get("USER")}"
export DISPLAY="\${DISPLAY:-:0}"

# GPU configuration (minimal, proven to work)
export __NV_PRIME_RENDER_OFFLOAD=1
export __GLX_VENDOR_LIBRARY_NAME=nvidia

# Disable problematic features
export RESOLVE_CUDA_FORCE=0  # Don't force CUDA
export RESOLVE_SKIP_VST_SCAN=1  # Skip VST scanning
export QT_LOGGING_RULES="*=false"  # Reduce Qt verbosity

# Clean environment launch
exec env -i \\
    HOME="\$HOME" \\
    USER="\$USER" \\
    DISPLAY="\$DISPLAY" \\
    PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin" \\
    LD_LIBRARY_PATH="/usr/lib/x86_64-linux-gnu:/usr/lib/nvidia" \\
    __NV_PRIME_RENDER_OFFLOAD=1 \\
    __GLX_VENDOR_LIBRARY_NAME=nvidia \\
    /opt/resolve/bin/resolve "\$@"
`;

  const launcherPath = "/tmp/davinci-launcher.sh";
  await Deno.writeTextFile(launcherPath, launcherScript);
  await runCommand(["chmod", "+x", launcherPath]);

  // 8. Create post-install script
  const postInstallScript = `#!/bin/bash
# Post-installation configuration

echo "Applying post-installation fixes..."

# Install the working launcher
sudo cp ${launcherPath} /usr/local/bin/davinci-resolve
sudo chmod +x /usr/local/bin/davinci-resolve

# Create desktop entry
cat > ~/.local/share/applications/davinci-resolve.desktop << 'DESKTOP'
[Desktop Entry]
Version=1.0
Type=Application
Name=DaVinci Resolve ${version}
Comment=Professional Video Editor
Icon=/opt/resolve/graphics/DV_Resolve.png
Exec=/usr/local/bin/davinci-resolve %f
Terminal=false
MimeType=application/x-resolveproj;
Categories=AudioVideo;AudioVideoEditing;Video;Graphics;
StartupNotify=true
DESKTOP

# Update desktop database
update-desktop-database ~/.local/share/applications/ 2>/dev/null || true

# Set GPU persistence mode for better performance
sudo nvidia-smi -pm 1 2>/dev/null || true

# Clear any problematic caches
rm -rf ~/.cache/BlackmagicDesign 2>/dev/null || true
rm -rf ~/.nv/ComputeCache 2>/dev/null || true

echo "Post-installation complete!"
`;

  const postInstallPath = "/tmp/davinci-post-install.sh";
  await Deno.writeTextFile(postInstallPath, postInstallScript);
  await runCommand(["chmod", "+x", postInstallPath]);

  // 9. Show instructions
  console.log("\n" + "=".repeat(60));
  console.log("DaVinci Resolve Upgrade Ready");
  console.log("=".repeat(60));
  console.log("\nInstaller found:", installerPath);
  console.log("Version:", version);
  console.log("\nTo complete the upgrade, run these commands:\n");
  console.log("1. Install DaVinci Resolve:");
  console.log(`   bash ${scriptPath}\n`);
  console.log("2. Apply fixes (after installation):");
  console.log(`   bash ${postInstallPath}\n`);
  console.log("3. Launch DaVinci Resolve:");
  console.log("   davinci-resolve\n");
  console.log("=".repeat(60));

  logger.info("\nThe upgrade process will:");
  logger.info("  ✓ Install DaVinci Resolve " + version);
  logger.info("  ✓ Preserve your projects and settings");
  logger.info("  ✓ Apply the working launcher configuration");
  logger.info("  ✓ Create desktop shortcuts");
  logger.info("  ✓ Optimize GPU settings");
}

// Main execution
if (import.meta.main) {
  try {
    await upgradeDavinciResolve();
  } catch (error) {
    logger.error(`Upgrade failed: ${error}`);
    Deno.exit(1);
  }
}

export { upgradeDavinciResolve };
