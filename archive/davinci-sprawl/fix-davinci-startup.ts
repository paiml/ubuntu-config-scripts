#!/usr/bin/env -S deno run --allow-all

/**
 * Fix DaVinci Resolve startup issues
 * 
 * Common fixes for hanging on project load
 */

import { logger } from "../lib/logger.ts";
import { runCommand } from "../lib/common.ts";

async function fixDavinciStartup(): Promise<void> {
    logger.info("Fixing DaVinci Resolve startup issues...");

    // 1. Kill any stuck processes
    logger.info("Killing stuck DaVinci processes...");
    await runCommand(["pkill", "-f", "resolve"]);
    await runCommand(["pkill", "-f", "VstScanner"]);
    await new Promise(resolve => setTimeout(resolve, 1000));

    // 2. Clear problematic cache and config files
    const home = Deno.env.get("HOME");
    if (!home) {
        logger.error("HOME environment variable not set");
        return;
    }

    const pathsToClean = [
        // VST scanner cache (often causes hangs)
        `${home}/.local/share/DaVinciResolve/vst`,
        `${home}/.local/share/DaVinciResolve/.vstscanner`,
        // Corrupted configs
        `${home}/.local/share/DaVinciResolve/configs/config.dat`,
        `${home}/.local/share/DaVinciResolve/configs/preferences.dat`,
        // Qt cache
        `${home}/.cache/BlackmagicDesign`,
        // GPU cache
        `${home}/.nv/ComputeCache`,
    ];

    for (const path of pathsToClean) {
        try {
            const stat = await Deno.stat(path);
            if (stat.isDirectory) {
                logger.info(`Removing directory: ${path}`);
                await Deno.remove(path, { recursive: true });
            } else if (stat.isFile) {
                const backup = `${path}.bak.${Date.now()}`;
                logger.info(`Backing up: ${path} -> ${backup}`);
                await Deno.rename(path, backup);
            }
        } catch {
            // Path doesn't exist, that's fine
        }
    }

    // 3. Create improved wrapper script
    const wrapperContent = `#!/bin/bash
# DaVinci Resolve Startup Fix Wrapper
# Generated by fix-davinci-startup.ts

echo "Starting DaVinci Resolve with fixes..."

# Kill any existing instances
pkill -f /opt/resolve/bin/resolve 2>/dev/null
pkill -f VstScanner 2>/dev/null
sleep 1

# Core environment
export DISPLAY=\${DISPLAY:-:0}
export HOME="${home}"

# NVIDIA GPU settings
export NVIDIA_DRIVER_CAPABILITIES=all
export __NV_PRIME_RENDER_OFFLOAD=1
export __GLX_VENDOR_LIBRARY_NAME=nvidia
export VK_ICD_FILENAMES=/usr/share/vulkan/icd.d/nvidia_icd.json

# CUDA settings - start without forcing CUDA
export RESOLVE_CUDA_FORCE=0  # Don't force CUDA initially
export CUDA_VISIBLE_DEVICES=0
export CUDA_HOME=/usr/local/cuda
export CUDA_PATH=/usr/local/cuda
export PATH=\$CUDA_HOME/bin:\$PATH

# Library paths
export LD_LIBRARY_PATH=/usr/local/cuda/lib64:/usr/lib/x86_64-linux-gnu:/usr/lib/nvidia:\$LD_LIBRARY_PATH

# OpenCL
export OCL_ICD_VENDORS=/etc/OpenCL/vendors/

# Qt/GUI fixes
export QT_AUTO_SCREEN_SCALE_FACTOR=0
export QT_SCREEN_SCALE_FACTORS=1
export QT_SCALE_FACTOR=1
export QT_QPA_PLATFORM=xcb
export QT_XCB_GL_INTEGRATION=xcb_glx  # Force GLX integration

# Disable problematic features
export QT_LOGGING_RULES="*.debug=false;qt.qpa.*=false"  # Reduce Qt debug spam
export LIBVA_DRIVER_NAME=nvidia  # Force NVIDIA VA-API
export VDPAU_DRIVER=nvidia  # Force NVIDIA VDPAU

# Audio (prevent PulseAudio issues)
export PULSE_LATENCY_MSEC=30

# Disable VST scanning on startup (major cause of hangs)
export RESOLVE_SKIP_VST_SCAN=1

# Create required directories
mkdir -p "$HOME/.local/share/DaVinciResolve/logs"
mkdir -p "$HOME/.local/share/DaVinciResolve/configs"

# Clear stale locks
rm -f "$HOME/.local/share/DaVinciResolve/.lock" 2>/dev/null
rm -f "$HOME/.local/share/DaVinciResolve/logs/*.lock" 2>/dev/null

# Set ulimits
ulimit -n 4096  # Increase file descriptor limit
ulimit -s unlimited  # Unlimited stack size

# Log startup
echo "Environment configured. Launching DaVinci Resolve..."
echo "If it hangs, try: Ctrl+C and run 'make system-davinci-diagnose'"

# Launch with timeout protection
timeout 30s /opt/resolve/bin/resolve "\$@" 2>&1 | tee /tmp/davinci-launch.log

EXIT_CODE=\$?

if [ \$EXIT_CODE -eq 124 ]; then
    echo "DaVinci Resolve failed to start within 30 seconds"
    echo "Checking for common issues..."
    
    # Check if it's a project issue
    if grep -q "Loading project" /tmp/davinci-launch.log; then
        echo "Appears to hang while loading project"
        echo "Try: Hold Alt while starting to bypass project load"
    fi
    
    # Check for VST issues
    if pgrep -f VstScanner > /dev/null; then
        echo "VST Scanner is stuck. Killing it..."
        pkill -f VstScanner
        echo "Try running again with VST scanning disabled"
    fi
    
    exit 1
fi

exit \$EXIT_CODE
`;

    // Write the improved wrapper
    const wrapperPath = "./davinci-resolve-fixed.sh";
    await Deno.writeTextFile(wrapperPath, wrapperContent);
    await Deno.chmod(wrapperPath, 0o755);

    logger.success("Created fixed wrapper: " + wrapperPath);

    // 4. Install wrapper
    logger.info("To install the fixed wrapper, run:");
    console.log(`\nsudo cp ${wrapperPath} /usr/local/bin/davinci-resolve`);
    console.log(`sudo chmod +x /usr/local/bin/davinci-resolve\n`);

    // 5. Additional fixes
    logger.info("Additional fixes applied:");
    logger.info("  ✓ Cleared VST scanner cache (common hang cause)");
    logger.info("  ✓ Reset configuration files");
    logger.info("  ✓ Cleared GPU compute cache");
    logger.info("  ✓ Added timeout protection (30s)");
    logger.info("  ✓ Disabled VST scanning on startup");
    
    logger.info("\nTroubleshooting tips:");
    logger.info("  1. If still hanging, hold Alt while starting to skip project load");
    logger.info("  2. Try without GPU: RESOLVE_CUDA_FORCE=0 davinci-resolve");
    logger.info("  3. Check logs: tail -f ~/.local/share/DaVinciResolve/logs/*.log");
    logger.info("  4. Reset all settings: rm -rf ~/.local/share/DaVinciResolve");
    
    // Check current GPU status
    const smiResult = await runCommand(["nvidia-smi", "--query-gpu=name,driver_version,compute_mode", "--format=csv,noheader"]);
    if (smiResult.success) {
        logger.info("\nGPU Status:");
        console.log(smiResult.stdout);
    }
}

if (import.meta.main) {
    try {
        await fixDavinciStartup();
    } catch (error) {
        logger.error(`Failed to fix DaVinci startup: ${error}`);
        Deno.exit(1);
    }
}