#!/usr/bin/env -S deno run --allow-all

import { logger } from "../lib/logger.ts";
import {
  commandExists,
  confirm,
  parseArgs,
  requireRoot,
  runCommand,
} from "../lib/common.ts";
import { z } from "../../deps.ts";

const ConfigSchema = z.object({
  dryRun: z.boolean().default(false),
  skipDriverInstall: z.boolean().default(false),
  driverVersion: z.string().optional(),
  force: z.boolean().default(false),
});

interface NvidiaInfo {
  hasNvidia: boolean;
  driverInstalled: boolean;
  driverVersion: string | null;
  cudaVersion: string | null;
  gpuModel: string | null;
}

async function detectNvidiaHardware(): Promise<NvidiaInfo> {
  logger.info("Detecting NVIDIA hardware...");

  const info: NvidiaInfo = {
    hasNvidia: false,
    driverInstalled: false,
    driverVersion: null,
    cudaVersion: null,
    gpuModel: null,
  };

  const lspciResult = await runCommand(["lspci"]);
  if (
    lspciResult.success && lspciResult.stdout.toLowerCase().includes("nvidia")
  ) {
    info.hasNvidia = true;

    const gpuLine = lspciResult.stdout.split("\n")
      .find((line) =>
        line.toLowerCase().includes("nvidia") &&
        line.toLowerCase().includes("vga")
      );
    if (gpuLine) {
      const match = gpuLine.match(/nvidia.*?:\s*(.+?)(?:\s*\[|$)/i);
      if (match?.[1]) {
        info.gpuModel = match[1].trim();
      }
    }
  }

  if (await commandExists("nvidia-smi")) {
    info.driverInstalled = true;

    const smiResult = await runCommand([
      "nvidia-smi",
      "--query-gpu=driver_version",
      "--format=csv,noheader",
    ]);
    if (smiResult.success) {
      info.driverVersion = smiResult.stdout.trim();
    }

    const cudaResult = await runCommand(["nvidia-smi", "-q"]);
    if (cudaResult.success) {
      const cudaMatch = cudaResult.stdout.match(/CUDA Version\s*:\s*([\d.]+)/);
      if (cudaMatch?.[1]) {
        info.cudaVersion = cudaMatch[1];
      }
    }
  }

  return info;
}

async function getLatestDriverVersion(): Promise<string> {
  logger.info("Fetching latest NVIDIA driver version...");

  const result = await runCommand([
    "apt-cache",
    "search",
    "nvidia-driver-[0-9]",
  ]);

  if (!result.success) {
    throw new Error("Failed to query available NVIDIA drivers");
  }

  const versions = result.stdout
    .split("\n")
    .map((line) => {
      const match = line.match(/nvidia-driver-(\d+)/);
      return match?.[1] ? parseInt(match[1], 10) : 0;
    })
    .filter((v) => v > 0)
    .sort((a, b) => b - a);

  if (versions.length === 0) {
    throw new Error("No NVIDIA drivers found in repository");
  }

  const recommendedVersion = versions.find((v) => v >= 535 && v <= 550) ||
    versions[0];

  return recommendedVersion!.toString();
}

async function installNvidiaDriver(
  version: string,
  dryRun: boolean,
): Promise<void> {
  logger.info(`Installing NVIDIA driver version ${version}...`);

  if (dryRun) {
    logger.info("[DRY RUN] Would install nvidia-driver-" + version);
    return;
  }

  const updateResult = await runCommand(["apt-get", "update"]);
  if (!updateResult.success) {
    throw new Error("Failed to update package repositories");
  }

  const installCmd = [
    "apt-get",
    "install",
    "-y",
    `nvidia-driver-${version}`,
    "nvidia-cuda-toolkit",
  ];

  const installResult = await runCommand(installCmd);
  if (!installResult.success) {
    throw new Error(`Failed to install NVIDIA driver: ${installResult.stderr}`);
  }

  logger.success("NVIDIA driver installed successfully");
}

async function configureEnvironment(dryRun: boolean): Promise<void> {
  logger.info("Configuring environment for DaVinci Resolve...");

  const envVars = [
    "export NVIDIA_DRIVER_CAPABILITIES=all",
    "export __NV_PRIME_RENDER_OFFLOAD=1",
    "export __GLX_VENDOR_LIBRARY_NAME=nvidia",
    "export CUDA_VISIBLE_DEVICES=0",
    "export VK_ICD_FILENAMES=/usr/share/vulkan/icd.d/nvidia_icd.json",
  ];

  const profilePath = "/etc/profile.d/davinci-cuda.sh";

  if (dryRun) {
    logger.info("[DRY RUN] Would create " + profilePath);
    logger.info("[DRY RUN] Environment variables:");
    envVars.forEach((v) => logger.info(`  ${v}`));
    return;
  }

  const content = `#!/bin/bash
# DaVinci Resolve CUDA Configuration
# Generated by configure-davinci.ts

${envVars.join("\n")}
`;

  await Deno.writeTextFile(profilePath, content);
  await runCommand(["chmod", "+x", profilePath]);

  logger.success("Environment configuration written to " + profilePath);
}

async function verifyInstallation(): Promise<boolean> {
  logger.info("Verifying NVIDIA installation...");

  const checks = [
    { cmd: ["nvidia-smi"], name: "NVIDIA System Management Interface" },
    { cmd: ["nvcc", "--version"], name: "CUDA Compiler" },
  ];

  let allPassed = true;

  for (const check of checks) {
    const result = await runCommand(check.cmd);
    if (result.success) {
      logger.success(`✓ ${check.name} is working`);
    } else {
      logger.error(`✗ ${check.name} failed`);
      allPassed = false;
    }
  }

  const modulesResult = await runCommand(["lsmod"]);
  if (modulesResult.success && modulesResult.stdout.includes("nvidia")) {
    logger.success("✓ NVIDIA kernel modules loaded");
  } else {
    logger.error("✗ NVIDIA kernel modules not loaded");
    allPassed = false;
  }

  return allPassed;
}

async function main(): Promise<void> {
  const args = parseArgs(Deno.args);

  const config = ConfigSchema.parse({
    dryRun: args["dry-run"] || false,
    skipDriverInstall: args["skip-driver"] || false,
    driverVersion: args["driver-version"] as string | undefined,
    force: args["force"] || false,
  });

  logger.info("DaVinci Resolve CUDA Configuration Script");
  logger.info("=========================================");

  if (!config.dryRun && !config.skipDriverInstall) {
    requireRoot();
  }

  const nvidiaInfo = await detectNvidiaHardware();

  if (!nvidiaInfo.hasNvidia) {
    logger.error("No NVIDIA GPU detected in this system");
    logger.info("This script requires an NVIDIA GPU for CUDA support");
    Deno.exit(1);
  }

  logger.info(`GPU Model: ${nvidiaInfo.gpuModel || "Unknown"}`);

  if (nvidiaInfo.driverInstalled) {
    logger.info(
      `Current driver version: ${nvidiaInfo.driverVersion || "Unknown"}`,
    );
    logger.info(`CUDA version: ${nvidiaInfo.cudaVersion || "Unknown"}`);

    if (!config.force && !config.skipDriverInstall) {
      const shouldUpdate = await confirm(
        "NVIDIA driver is already installed. Update to latest version?",
        false,
      );

      if (!shouldUpdate) {
        config.skipDriverInstall = true;
      }
    }
  } else {
    logger.warn("No NVIDIA driver currently installed");
  }

  if (!config.skipDriverInstall) {
    const targetVersion = config.driverVersion ||
      await getLatestDriverVersion();

    logger.info(`Target driver version: ${targetVersion}`);

    if (!config.dryRun) {
      const proceed = await confirm(
        `Install NVIDIA driver ${targetVersion} and CUDA toolkit?`,
        true,
      );

      if (!proceed) {
        logger.info("Installation cancelled");
        Deno.exit(0);
      }
    }

    await installNvidiaDriver(targetVersion, config.dryRun);
  }

  await configureEnvironment(config.dryRun);

  if (!config.dryRun) {
    const verified = await verifyInstallation();

    if (verified) {
      logger.success("✓ All checks passed!");
      logger.info("");
      logger.info("Next steps:");
      logger.info("1. Restart your system to load the new driver");
      logger.info(
        "2. Run 'source /etc/profile.d/davinci-cuda.sh' or start a new shell",
      );
      logger.info("3. Launch DaVinci Resolve");
    } else {
      logger.warn("Some checks failed. You may need to restart your system.");
    }
  } else {
    logger.info("[DRY RUN] Complete - no changes were made");
  }
}

if (import.meta.main) {
  try {
    await main();
  } catch (error) {
    logger.error(`Error: ${error}`);
    Deno.exit(1);
  }
}
